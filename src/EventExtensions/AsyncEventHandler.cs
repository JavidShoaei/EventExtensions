using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EventExtensions
{
#if NETSTANDARD
    /// <summary>
    /// Represents the method that will handle an event that has no event data.
    /// </summary>
    /// <param name="sender">The source of the event.</param>
    /// <param name="e">An object that contains no event data.</param>
    /// <returns>A <see cref="Task"/> that completes when the handler's job is done.</returns>
    public delegate Task AsyncEventHandler(object sender, EventArgs e);

    /// <summary>
    /// Represents the method that will handle an event when the event provides data.
    /// </summary>
    /// <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    /// <param name="sender">The source of the event.</param>
    /// <param name="e">An object that contains the event data.</param>
    /// <returns>A <see cref="Task"/> that completes when the handler's job is done.</returns>
    public delegate Task AsyncEventHandler<TEventArgs>(object sender, TEventArgs e);
#endif
}
